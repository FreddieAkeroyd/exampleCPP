/*
 * Copyright information and license terms for this software can be
 * found in the file LICENSE that is included with the distribution
 */

/**
 * @author mrk
 * @date 2021.04.10
 */
#include <cstddef>
#include <cstdlib>
#include <cstddef>
#include <string>
#include <cstdio>
#include <memory>
#include <vector>

#include <pv/standardField.h>
#include <pv/pvData.h>
#include <pv/pvDatabase.h>
#include <pv/pvdbcrScalar.h>
using namespace std;
using namespace epics::pvData;
using namespace epics::pvDatabase;


class DatabaseRecord;
typedef std::tr1::shared_ptr<DatabaseRecord> DatabaseRecordPtr;

class epicsShareClass DatabaseRecord
{
private:
   PVDatabasePtr master;
public:
    POINTER_DEFINITIONS(DatabaseRecord);
    DatabaseRecord()
    {
        master = PVDatabase::getMaster();
    }
    void createScalarRecord(std::string const & recordName,std::string const &scalarType,
        int asLevel =0,std::string const &asGroup = string("DEFAULT"))
    {
        PVRecordPtr record = PvdbcrScalar::create(recordName,scalarType);
        bool result = master->addRecord(record);      
        if(!result) {
            cerr << "record " << recordName << " not added to master\n";
        }
    }
};

